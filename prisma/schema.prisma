datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Schema for a winemakers log
/// Store information on batches of wine, cider, beer, etc.

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  batches       Batch[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  ingredients   Ingredient[]
  vessels       Vessel[]
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Batch {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  user              User              @relation(fields: [userId], references: [id])
  userId            String            @db.ObjectId
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  initialVolume     Float?
  initialVolumeUnit VolumeUnit?
  vintage           Int
  startDate         DateTime          @default(now())
  endDate           DateTime?
  additions         Addition[]
  readings          Reading[]
  batchIngredients  BatchIngredient[]
  rackings          Racking[]
  currentVessel     Vessel?           @relation(fields: [vesselId], references: [id])
  vesselId          String?           @db.ObjectId
}

model BatchIngredient {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  ingredient   Ingredient  @relation(fields: [ingredientId], references: [id])
  ingredientId String      @db.ObjectId
  volume       Float?
  volumeUnit   VolumeUnit?
  weight       Float?
  weightUnit   WeightUnit?
  date         DateTime
  notes        String?
  batch        Batch       @relation(fields: [batchId], references: [id])
  batchId      String      @db.ObjectId
}

model Addition {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  batch      Batch       @relation(fields: [batchId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  batchId    String      @db.ObjectId
  volume     Float?
  volumeUnit VolumeUnit?
  weight     Float?
  weightUnit WeightUnit?
  date       DateTime
  notes      String
}

model Reading {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  batch       Batch        @relation(fields: [batchId], references: [id])
  batchId     String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  measurments Measurment[]
  date        DateTime
  notes       String?
}

enum MeasurmentUnit {
  degreesCelcius
  degreesFahrenheit
  specificGravity
  brix
  pH
  ta
  so2
  other
}

model Measurment {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  value      Float
  units      MeasurmentUnit
  otherUnits String?
  reading    Reading?       @relation(fields: [readingId], references: [id])
  readingId  String?        @db.ObjectId
}

enum VolumeUnit {
  gallon
  liter
  barrel
  bin
}

enum WeightUnit {
  pound
  ounce
  gram
  kilogram
  tonne
}

model Ingredient {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  type            String
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @db.ObjectId
  batchIngredient BatchIngredient[]
}

model Racking {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  batch   Batch?   @relation(fields: [batchId], references: [id])
  batchId String?  @db.ObjectId
  date    DateTime
  notes   String
  from    Vessel   @relation(fields: [fromId], references: [id], name: "fromVessel")
  fromId  String   @db.ObjectId
  to      Vessel   @relation(fields: [toId], references: [id], name: "toVessel")
  toId    String   @db.ObjectId
}

model Vessel {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  volume         Float
  volumeUnit     VolumeUnit @default(liter)
  type           String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  currentBatches Batch[]
  rackingFrom    Racking[]  @relation("fromVessel")
  rackingTo      Racking[]  @relation("toVessel")
  user           User?      @relation(fields: [userId], references: [id])
  userId         String?    @db.ObjectId
}

/// required fields for Next Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
